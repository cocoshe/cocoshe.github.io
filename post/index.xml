<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on coco&#39;s blog</title>
    <link>https://example.com/post/</link>
    <description>Recent content in Posts on coco&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Mar 2022 15:25:32 +0800</lastBuildDate><atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ReSys(1)从协同过滤到隐语义模型</title>
      <link>https://example.com/p/resys1%E4%BB%8E%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E5%88%B0%E9%9A%90%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 03 Mar 2022 15:25:32 +0800</pubDate>
      
      <guid>https://example.com/p/resys1%E4%BB%8E%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E5%88%B0%E9%9A%90%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B/</guid>
      <description>从基于领域方法到LFM 领域方法 UserCF（基于用户的协同过滤） 基于用户的协同过滤，主要是比较与目标用户的兴趣类似的用户（对于数值的特征，直接采用余弦相似度；对于“类”的特征，则可以先进行one-hot之后进行余弦相似度），然后将这些用户有过行为的物品推荐给目标用户
class UserCF: def __init__(self): self.file_path = &amp;#39;dataset/ratings.csv&amp;#39; self.df = pd.read_csv(self.file_path) @staticmethod def _cosine_similarity(vector1, vector2): &amp;#34;&amp;#34;&amp;#34; 因为MovieId大小不是量,而是代表类, 这里的余弦相似就是进行了一个类似于 hashmap 的操作 所以用len来带入了cosine_similarity操作 simple method for calculate cosine distance. e.g: x = [1 0 1 1 0], y = [0 1 1 0 1] cosine = (x1*y1+x2*y2+...) / [sqrt(x1^2+x2^2+...) * sqrt(y1^2+y2^2+...)] that means union_len(movies1, movies2) / sqrt(len(movies1)*len(movies2)) &amp;#34;&amp;#34;&amp;#34; union_len = len(set(vector1) &amp;amp; set(vector2)) # 等价于x1*y1+x2*y2+... if union_len == 0: return 0.</description>
    </item>
    
    <item>
      <title>Docker部署web&#43;mysql</title>
      <link>https://example.com/p/docker%E9%83%A8%E7%BD%B2web-mysql/</link>
      <pubDate>Tue, 15 Feb 2022 00:28:30 +0800</pubDate>
      
      <guid>https://example.com/p/docker%E9%83%A8%E7%BD%B2web-mysql/</guid>
      <description>Go+Mysql项目阿里云部署(docker) 基于docker的Go-web+Mysql部署
 安装docker,拉取mysql镜像
 Go-web项目配置文件：
httpEngine:# addr: &amp;#34;127.0.0.1&amp;#34; # 本地测试addr:&amp;#34;0.0.0.0&amp;#34;# 对外开放(重要)port:&amp;#34;8080&amp;#34;# 监听端口templates:&amp;#34;templates/*&amp;#34;db:# 数据库配置# Addr: &amp;#34;127.0.0.1&amp;#34; # 本地数据库Addr:&amp;#34;mysql&amp;#34;# mysql容器作为数据库(后续用 --link docker网络进行连接)Port:&amp;#34;3306&amp;#34;# mysql开放端口User:&amp;#34;root&amp;#34;Pass:&amp;#34;xxxxxxx&amp;#34;DB:&amp;#34;yuheng&amp;#34;# 数据库名DB_MAX_OPEN_CONNS:20DB_MAX_IDLE_CONNS:10DB_MAX_LIFETIME_CONNS:7200basic:jwt:secret:&amp;#34;xxxxx&amp;#34;编写Dockerfile # syntax=docker/dockerfile:1FROMgolang:1.17-alpineMAINTAINERcocosheWORKDIR/yuhengCOPY . .RUN export GOPROXY=https://goproxy.io &amp;amp;&amp;amp; go mod tidy &amp;amp;&amp;amp; go buildEXPOSE8080CMD [&amp;#34;./backend&amp;#34;]区别：
RUN是docker build的时候(制作image)就早早运行了
CMD是docker run真正运行的时候执行(多个CMD则只执行最后一个)
Dockerfile中RUN，CMD和ENTRYPOINT都能够用于执行命令，下面是三者的主要用途：
 RUN命令执行命令并创建新的镜像层，通常用于安装软件包 CMD命令设置容器启动后默认执行的命令及其参数，但CMD设置的命令能够被docker run命令后面的命令行参数替换 ENTRYPOINT配置容器启动时的执行命令（不会被忽略，一定会被执行，即使运行 docker run时指定了其他命令）  利用Dockerfile制作镜像并上传 docker build -t cocoshe/yuheng:0.2 . # -t [image name]:[tagname] # [-f] 若dockerfile名字不是~,那就要用-f来指定 # 最后一个点(.)表示dockerfile在当前目录下 docker push cocoshe/yuheng:0.2 # push到dockerhub仓库 服务器部署 拉取mysql和仓库中自己制作的image</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://example.com/p/docker/</link>
      <pubDate>Mon, 07 Feb 2022 19:54:18 +0800</pubDate>
      
      <guid>https://example.com/p/docker/</guid>
      <description>Docker Commands 启动docker服务
sudo service docker start 镜像 docker images docker pull [image_name] 容器 docker ps	# 运行中的容器 docker ps -a # 所有容器，包括关掉的 exit() # 退出容器，会关闭 ctrl + p + q # 退出容器，不会关闭 docker pull [name] docker start [id]	# 结合docker ps -a,重启一个容器 docker attach [id]	# 进入一个正在运行的容器 docker exec -it [id] /bin/bash # 进入一个运行中的容器 docker docker commit -m &amp;quot;&amp;quot; -a &amp;quot;author&amp;quot; [id] [name]:[TAG] # 容器打包成一个镜像，他会出现在docker images里面   容器持久化(数据卷)</description>
    </item>
    
    <item>
      <title>VAE</title>
      <link>https://example.com/p/vae/</link>
      <pubDate>Fri, 26 Nov 2021 11:02:10 +0800</pubDate>
      
      <guid>https://example.com/p/vae/</guid>
      <description>VAE 参考博客
一些解读
PCA  vae 
 PCA的解释：原向量x乘以矩阵W得到中间编码c，再乘以W的转置，得到x head，得到的x head希望与原x越接近越好，有一点要注意，从x到c的变换过程是线性的。
 Deep Auto Encoder  和PCA类似，只是网络层数更深，变换是非线性的（因为可以加入一些非线性的激活函数），Deep Auto Encoder变成成了如下的样子：
  
中间有个很窄的hidden layer的输出就是压缩之后的code，当然以bottle layer对称的W不必要互为转置，也不要求一定要用RBM初始化参数，直接train，效果也很好。
下面来看一下，对于MNIST手写数字数据集用像素点、PCA、Deep Auto Encoder三种方式分别做tSNE的展现图
 
右上角为deep auto encoder之后做tSNE，所有的数字都分的很开，效果比较好。
 总结一下，PCA和Deep auto encoder所做的事都类似，就是把原数据压缩到一个低维向量，让后再反解回来，反解回来的值希望与原来的值越接近越好。
PCA像是比较基础，然后Deep auto encoder像是对PCA进行魔改
 Auto Encoder用于异常检测 ​ 对于自动编码器用于异常检测，可以参考《Variational Autoencoder based Anomaly Detection using Reconstruction Probability》这篇论文 ，论文地址：http://dm.snu.ac.kr/static/docs/TR/SNUDM-TR-2015-03.pdf ，论文标题大概可以这样翻译：基于变分自动编码器重建概率的异常检测。 ​ 文中不是直接从变分自动编码器切入，而是先介绍自动编码器，论文言简意赅，我们先来看看论文中对Auto Encoder的训练过程的描述
下面来看，如果将Auto Encoder用于异常检测，还是先看公式
 
 就是先训练一个encode，然后进行推理，得到loss，然后反向传播
  
说明：
 先用正常的数据集训练一个Auto Encoder 用训练出的Auto Encoder计算异常数据的重建误差，重建误差大于某个阀值α，则为异常，否则则正常。  文中有这样一段描述：</description>
    </item>
    
    <item>
      <title>手撸一下Resnet18</title>
      <link>https://example.com/p/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%8Bresnet18/</link>
      <pubDate>Fri, 26 Nov 2021 01:27:04 +0800</pubDate>
      
      <guid>https://example.com/p/%E6%89%8B%E6%92%B8%E4%B8%80%E4%B8%8Bresnet18/</guid>
      <description>手撸一下Resnet18  模型结构参考 
模型细节可以参考CSDN上的一篇博客
import torch import torch.nn as nn class Identity(nn.Module): def __init__(self): super(Identity, self).__init__() def forward(self, x): return x class Block(nn.Module): def __init__(self, in_dim, dim, kernal_size, stride): super(Block, self).__init__() self.conv1 = nn.Conv2d(in_channels=in_dim, out_channels=dim, kernel_size=kernal_size, stride=stride, padding=1) self.bn1 = nn.BatchNorm2d(dim) self.relu1 = nn.ReLU() self.conv2 = nn.Conv2d(in_channels=dim, out_channels=dim, kernel_size=kernal_size, stride=1, padding=1) self.bn2 = nn.BatchNorm2d(dim) self.conv3 = nn.Conv2d(in_channels=dim, out_channels=dim, kernel_size=kernal_size, stride=1, padding=1) self.bn3 = nn.BatchNorm2d(dim) self.relu2 = nn.ReLU() self.conv4 = nn.</description>
    </item>
    
    <item>
      <title>Scrapy</title>
      <link>https://example.com/p/scrapy/</link>
      <pubDate>Sun, 14 Nov 2021 19:32:57 +0800</pubDate>
      
      <guid>https://example.com/p/scrapy/</guid>
      <description>Scrapy Scrapy is written in pure Python and depends on a few key Python packages (among others):
 lxml, an efficient XML and HTML parser parsel, an HTML/XML data extraction library written on top of lxml, w3lib, a multi-purpose helper for dealing with URLs and web page encodings twisted, an asynchronous networking framework cryptography and pyOpenSSL, to deal with various network-level security needs  官方doc
 先scrapy startproject tutorial下好tutorial项目，然后自己配置一下venv进行pip3 install scrapy</description>
    </item>
    
    <item>
      <title>Chinese Test</title>
      <link>https://example.com/p/test-chinese/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/test-chinese/</guid>
      <description>正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。
奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。
引用  思念是最暖的忧伤像一双翅膀
让我停不了飞不远在过往游荡
不告而别的你 就算为了我着想
这么沉痛的呵护 我怎么能翱翔
最暖的憂傷 - 田馥甄
 图片  Photo by Florian Klauer on Unsplash   Photo by Luca Bravo on Unsplash</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://example.com/p/markdown-syntax-guide/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/markdown-syntax-guide/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://example.com/p/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>https://example.com/p/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://example.com/p/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
